#!/usr/bin/env python3

from datetime import datetime
import json
import os.path

def main():
    datetime_now = datetime.today()
    filepath = '/home/cowrie/cowrie/var/log/cowrie/cowrie.json'
    if os.path.exists(filepath):
        if not os.path.exists('/home/cowrie/modules/malware_detector/data'):
            os.mkdir('/home/cowrie/modules/malware_detector/data')
        with open(filepath) as f:
            for line in f:
                login_count = 0
                data = json.loads(line)
                delta = count_delta(datetime_now, data['timestamp'])
                if delta == 0 and 'cowrie.login' in data['eventid']:
                    if not os.path.exists('/home/cowrie/modules/malware_detector/data/' + data['src_ip']):
                        os.mkdir('/home/cowrie/modules/malware_detector/data/' + data['src_ip'])
                    if 'cowrie.login.success' in data['eventid']:
                        record_credential(data)
                    record_in_log(data, 0)
                    record_as_dict(data, datetime_now)
                    login_count = count_multiple_login_attempts(data)
                    if login_count > 5:
                        record_in_log(data, login_count)

def append_to_file(msg, file_name):
    with open(file_name, "a+") as f:
        f.write(msg+"\n")

def record_in_log(data, n):
    if n == 0:
        msg = data['timestamp'] + ' [MWR] ' + data['eventid'] + ' from ' + data['src_ip'] + ' with ' + data['username'] + ':' + data['password']
    else:
        msg = data['timestamp'] + ' [MWR] Multiple login-attempts from ' + data['src_ip'] + ' detected. Login in last 10s: ' + str(n)
    filepath = '/home/cowrie/cowrie/var/log/cowrie/honeypot.log'
    if not msg_is_exist(msg, filepath):
        append_to_file(msg, filepath)

def count_delta(datetime_now, readed_datetime):
    if isinstance(datetime_now, str):
        dt_a = datetime.strptime(datetime_now, '%Y-%m-%dT%H:%M:%S.%fZ')
    else:
        dt_a = datetime_now
    dt_b = datetime.strptime(readed_datetime, '%Y-%m-%dT%H:%M:%S.%fZ')
    delta = int((dt_a - dt_b).total_seconds())
    return delta

def count_multiple_login_attempts(data):
    count = 0
    filepath = '/home/cowrie/modules/malware_detector/data/' + data['src_ip'] + '/' + get_date(data['timestamp'], 'T') + '.json'
    if os.path.exists(filepath):
        with open(filepath) as f:
            for line in f:
                readed_data = json.loads(line)
                delta = count_delta(data['timestamp'], readed_data['timestamp'])
                if delta >= 0 and delta <= 15:
                    count += 1
    return count

def dict_is_exist(dict_obj, filepath):
    if os.path.exists(filepath):
        with open(filepath) as f:
            for line in f:
                tmp = json.loads(line)
                if dict_obj == tmp:
                    return True
        return False
    else:
        return False

def get_date(date_time, end_pos):
    if isinstance(date_time, str):
        end_pos = date_time.find(end_pos)
        return date_time[0:end_pos:]
    else:
        return datetime.today().strftime('%Y-%m-%d')
    
def record_as_dict(data, datetime_now):
    dict_obj ={
        "eventid" : data['eventid'],
        "username" : data['username'],
        "password" : data['password'],
        "timestamp" : data['timestamp']
        }
    filepath_d = '/home/cowrie/modules/malware_detector/data/' + data['src_ip'] + '/' + get_date(datetime_now, 'T') + '.json'
    if not dict_is_exist(dict_obj, filepath_d):
        with open(filepath_d, "a+") as of:
            json.dump(dict_obj, of)
            of.write('\n')

def record_credential(data):
    credential = data['username']+':x:!'+ data['password']
    filepath_c = '/home/cowrie/modules/malware_detector/data/credentials'
    if not msg_is_exist(credential, filepath_c):
        append_to_file(credential, filepath_c)

def msg_is_exist(msg, filepath):
    if os.path.exists(filepath):
        with open(filepath) as f:
            for line in f:
                if msg == line.replace('\n',''):
                    return True
        return False
    else:
        return False

if __name__ == '__main__':
    try:
        while True:
            try:
                main()
            except TypeError:
                continue
    except KeyboardInterrupt:
        print("\nMalware detector stopped")
